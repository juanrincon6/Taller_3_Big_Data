#--- Limpiar entorno
rm(list = ls())
gc()
#closeAllConnections()

#--- Cargar paquetes
if (!require("pacman")) install.packages("pacman")
library(pacman)

p_load(
  tidyverse, rio, plotly, leaflet, rgeos, units, sf, osmdata,
  tidymodels, randomForest, rattle, spatialsample, tmaptools,
  readr, skimr, caret, glmnet, stargazer, parallel, doParallel,
  MLmetrics, themis, rlang, mlr, rpart, rpart.plot, kableExtra,
  keras, tensorflow
)

# Configurar rutas según usuario
user <- Sys.getenv("USERNAME")
if (user == "judel") {
  base_path <- "C:/Users/judel/OneDrive/Documentos/ANDES/Semestre 2/Big data/tercera parte/Taller 3/input"
} else if(user == "e125379") {
  base_path <- "C:\\Users\\e125379\\OneDrive - Mastercard\\8. Uniandes\\6. Big Data\\4. Taller 3\\1. Data\\"
} else if(user == "anamarrojas") {
  base_path <- "C:\\Users\\anamarrojas\\Downloads\\Taller 3\\1. Data\\"
} 

store_path <- file.path(base_path, "stores")
pred_path  <- file.path(base_path, "predicciones")
dir.create(pred_path, recursive = TRUE, showWarnings = FALSE)

#--- Paralelización
n_cores <- detectCores()
cl <- makePSOCKcluster(n_cores - 1)

#--- Cargar datos
train <- readRDS(file.path(store_path, "train_full_final.rds"))
test  <- readRDS(file.path(store_path, "test_full_final.rds"))

#--- Convertir factores
train$property_type <- as.factor(train$property_type)
test$property_type  <- as.factor(test$property_type)

#--- Fórmula
fmla <- price ~ surface_covered + rooms + bedrooms + bathrooms +
  property_type + tiene_remodelado + tiene_lujoso + tiene_bbq +
  tiene_balcon + tiene_terraza + tiene_vista + tiene_club_house +
  tiene_chimenea + distancia_parque + distancia_bus +
  distancia_avenida_principal + distancia_universidad +
  distancia_policia + distancia_restaurant + distancia_colegio

#--- Control de entrenamiento
set.seed(123)
fitControl <- trainControl(method = "cv", number = 10)

# --------------------------------------------------------
# Modelo de Red Neuronal Simple
# --------------------------------------------------------

# Definir el modelo de red neuronal simple
model_nn_simple <- keras_model_sequential() %>%
  layer_dense(units = 64, activation = "relu", input_shape = c(ncol(train) - 1)) %>%  # Usamos input_shape con c()
  layer_dense(units = 1)  # Capa de salida

# Resumen del modelo
summary(model_nn_simple)

# Compilar el modelo
model_nn_simple %>% compile(
  loss = "mse",  # Función de pérdida
  optimizer = "adam",  # Optimizador
  metrics = c("mean_squared_error")  # Métrica
)

# Entrenar el modelo
history_simple <- model_nn_simple %>% fit(
  as.matrix(train %>% select(-price)), train$price, 
  epochs = 30,  # Número de épocas
  batch_size = 32  # Tamaño del batch
)

# Graficar la historia de entrenamiento
plot(history_simple)



# Predicciones con el modelo simple
y_pred_nn_simple <- model_nn_simple %>% predict(as.matrix(test %>% select(-price)))

# --------------------------------------------------------
# Modelo de Red Neuronal Complejo
# --------------------------------------------------------

# Definir el modelo de red neuronal más complejo
model_nn_complex <- keras_model_sequential() %>%
  layer_dense(units = 128, activation = "relu", input_shape = c(ncol(train) - 1)) %>%
  layer_dense(units = 64, activation = "relu") %>%
  layer_dense(units = 32, activation = "relu") %>%
  layer_dense(units = 1)  # Capa de salida

# Resumen del modelo
summary(model_nn_complex)

# Compilar el modelo
model_nn_complex %>% compile(
  loss = "mse",  # Función de pérdida
  optimizer = "adam",  # Optimizador
  metrics = c("mean_squared_error")  # Métrica
)

# Entrenar el modelo
history_complex <- model_nn_complex %>% fit(
  as.matrix(train %>% select(-price)), train$price, 
  epochs = 50,  # Número de épocas
  batch_size = 32  # Tamaño del batch
)

# Graficar la historia de entrenamiento
plot(history_complex)

# Predicciones con el modelo complejo
y_pred_nn_complex <- model_nn_complex %>% predict(as.matrix(test %>% select(-price)))

# --------------------------------------------------------
# Modelo Lineal, Ridge, Lasso y Elastic Net para comparación
# --------------------------------------------------------

# --------------------------------------------------------
# Modelo Lineal (OLS)
# --------------------------------------------------------

modelo_lm <- caret::train(
  fmla, data = train, method = "lm",
  trControl = fitControl, preProcess = c("center", "scale")
)

# --------------------------------------------------------
# Modelo Ridge (alpha = 0)
# --------------------------------------------------------

modelo_ridge <- caret::train(
  fmla, data = train, method = "glmnet",
  trControl = fitControl,
  tuneGrid = expand.grid(alpha = 0, lambda = seq(13500000, 13700000, by = 100)),
  preProcess = c("center", "scale")
)

# --------------------------------------------------------
# Modelo Lasso (alpha = 1)
# --------------------------------------------------------

modelo_lasso <- caret::train(
  fmla, data = train, method = "glmnet",
  trControl = fitControl,
  tuneGrid = expand.grid(alpha = 1, lambda = seq(100000, 210000, by = 100)),
  preProcess = c("center", "scale")
)

# --------------------------------------------------------
# Modelo Elastic Net (alpha entre 0 y 1)
# --------------------------------------------------------

modelo_en <- caret::train(
  fmla, data = train, method = "glmnet",
  trControl = fitControl,
  tuneGrid = expand.grid(alpha = seq(0, 1, by = 0.1), lambda = seq(100000, 1000000, by = 10000)),
  preProcess = c("center", "scale")
)

# --------------------------------------------------------
# Comparación de Predicciones y RMSE
# --------------------------------------------------------

# Comparar RMSE para diferentes modelos
rmse_df <- tibble(
  OLS   = modelo_lm$results$RMSE,
  RIDGE = modelo_ridge$results %>% filter(lambda == modelo_ridge$bestTune$lambda) %>% pull(RMSE),
  LASSO = modelo_lasso$results %>% filter(lambda == modelo_lasso$bestTune$lambda) %>% pull(RMSE),
  EN    = modelo_en$results %>% filter(
    alpha == modelo_en$bestTune$alpha,
    lambda == modelo_en$bestTune$lambda
  ) %>% pull(RMSE)
)

# Imprimir RMSE para cada modelo
print(rmse_df)

# Exportar predicciones de la red neuronal simple y compleja
submission_template <- test
submission_template$price_nn_simple <- round(y_pred_nn_simple)
submission_template$price_nn_complex <- round(y_pred_nn_complex)

# Guardar las predicciones en un archivo CSV
write_csv(submission_template %>% select(property_id, price_nn_simple, price_nn_complex), "predicciones_nn.csv")
